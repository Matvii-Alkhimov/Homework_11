{"mappings":"C,A,WCuBA,IAAM,EAAc,AAFN,CAAC,QAAS,SAAU,QAAS,SAAU,QAAQ,CAEnC,GAAA,CAAI,AAAA,GAAQ,AAItC,CAAA,SAAwB,CAAI,EACxB,IAAM,EAUC,KAAK,KAAA,CAAM,AAAiB,IAAjB,KAAK,MAAA,GAVU,KAEjC,OAAO,IAAI,QAAQ,CAAC,EAAS,KACzB,WAAW,KACP,EAAQ,CAAC,EAAE,EAAK,GAAG,EAAE,EAAM,EAAE,CAAC,CAClC,EAAG,EACP,EACJ,CAAA,EAZqD,IAErD,QAAQ,GAAA,CAAI,GAAa,IAAA,CAAK,AAAA,GAAK,QAAQ,GAAA,CAAI,IAkB/C,QAAQ,IAAA,CAAK,GAAa,IAAA,CAAK,AAAA,GAAK,QAAQ,GAAA,CAAI,G","sources":["<anon>","src/js/hw_12.js"],"sourcesContent":["(function () {\nvar $ed935bda47cde931$exports = {};\n// Завдання 1\n// \"Порівняння кількох промісів\"\n// Ви маєте набір функцій, які повертають проміси з випадковими затримками. \n// Ваше завдання — виконати всі проміси одночасно за допомогою Promise.all і обробити результати.\n// Створіть функцію delayedPromise, яка приймає значення і затримку (у мілісекундах)\n// і повертає проміс, який вирішується з заданим значенням після затримки.\n// Створіть масив з 5 промісів, використовуючи функцію delayedPromise, із різними значеннями та затримками.\n// Використайте Promise.all, щоб одночасно виконати всі проміси з масиву.\n// Обробіть результати вирішення промісів та виведіть їх у консоль.\n// Завдання 2\n// \"Змагання промісів\"\n// Ви маєте набір функцій, які повертають проміси з випадковими затримками. \n// Ваше завдання — виконати всі проміси одночасно за допомогою Promise.race і отримати результат найшвидшого проміса.\n// Створіть функцію randomDelay, яка приймає значення і повертає проміс з випадковою затримкою (від 1000 до 5000 мілісекунд).\n// Створіть масив з 5 промісів, використовуючи функцію randomDelay, із різними значеннями.\n// Використайте Promise.race, щоб виконати всі проміси з масиву і отримати результат найшвидшого проміса.\n// Обробіть результат найшвидшого проміса та виведіть його у консоль.\n// 1\nconst $ed935bda47cde931$var$array = [\n    \"first\",\n    \"second\",\n    \"third\",\n    \"fourth\",\n    \"fifth\"\n];\nconst $ed935bda47cde931$var$promisesArr = $ed935bda47cde931$var$array.map((item)=>$ed935bda47cde931$var$delayedPromise(item));\nPromise.all($ed935bda47cde931$var$promisesArr).then((res)=>console.log(res));\nfunction $ed935bda47cde931$var$delayedPromise(item) {\n    const delay = $ed935bda47cde931$var$getRandomDelayFunc(1000, 3000);\n    return new Promise((resolve, reject)=>{\n        setTimeout(()=>{\n            resolve(`${item} - ${delay}ms`);\n        }, delay);\n    });\n}\nfunction $ed935bda47cde931$var$getRandomDelayFunc(min, max) {\n    return Math.round(Math.random() * (max - min) + min);\n}\n// 2\nPromise.race($ed935bda47cde931$var$promisesArr).then((res)=>console.log(res));\n\n})();\n//# sourceMappingURL=hw_12.10b77ada.js.map\n","// Завдання 1\n// \"Порівняння кількох промісів\"\n// Ви маєте набір функцій, які повертають проміси з випадковими затримками. \n// Ваше завдання — виконати всі проміси одночасно за допомогою Promise.all і обробити результати.\n// Створіть функцію delayedPromise, яка приймає значення і затримку (у мілісекундах)\n// і повертає проміс, який вирішується з заданим значенням після затримки.\n// Створіть масив з 5 промісів, використовуючи функцію delayedPromise, із різними значеннями та затримками.\n// Використайте Promise.all, щоб одночасно виконати всі проміси з масиву.\n// Обробіть результати вирішення промісів та виведіть їх у консоль.\n\n// Завдання 2\n// \"Змагання промісів\"\n// Ви маєте набір функцій, які повертають проміси з випадковими затримками. \n// Ваше завдання — виконати всі проміси одночасно за допомогою Promise.race і отримати результат найшвидшого проміса.\n// Створіть функцію randomDelay, яка приймає значення і повертає проміс з випадковою затримкою (від 1000 до 5000 мілісекунд).\n// Створіть масив з 5 промісів, використовуючи функцію randomDelay, із різними значеннями.\n// Використайте Promise.race, щоб виконати всі проміси з масиву і отримати результат найшвидшого проміса.\n// Обробіть результат найшвидшого проміса та виведіть його у консоль.\n\n// 1\n\nconst array = [\"first\", \"second\", \"third\", \"fourth\", \"fifth\"];\n\nconst promisesArr = array.map(item => delayedPromise(item));\n\nPromise.all(promisesArr).then(res=>console.log(res))\n\nfunction delayedPromise(item) {\n    const delay = getRandomDelayFunc(1000, 3000);\n    \n    return new Promise((resolve, reject) => {\n        setTimeout(()=> {\n            resolve(`${item} - ${delay}ms`)\n        }, delay)\n    })\n}\n\nfunction getRandomDelayFunc(min, max) {\n    return Math.round(Math.random() * (max - min) + min);\n}\n\n// 2\n\nPromise.race(promisesArr).then(res=>console.log(res))"],"names":["$ed935bda47cde931$var$promisesArr","$ed935bda47cde931$var$array","map","item","$ed935bda47cde931$var$delayedPromise","delay","Math","round","max","random","Promise","resolve","reject","setTimeout","all","then","res","console","log","race"],"version":3,"file":"hw_12.10b77ada.js.map"}