// Завдання 1
// "Порівняння кількох промісів"
// Ви маєте набір функцій, які повертають проміси з випадковими затримками. 
// Ваше завдання — виконати всі проміси одночасно за допомогою Promise.all і обробити результати.
// Створіть функцію delayedPromise, яка приймає значення і затримку (у мілісекундах)
// і повертає проміс, який вирішується з заданим значенням після затримки.
// Створіть масив з 5 промісів, використовуючи функцію delayedPromise, із різними значеннями та затримками.
// Використайте Promise.all, щоб одночасно виконати всі проміси з масиву.
// Обробіть результати вирішення промісів та виведіть їх у консоль.

// Завдання 2
// "Змагання промісів"
// Ви маєте набір функцій, які повертають проміси з випадковими затримками. 
// Ваше завдання — виконати всі проміси одночасно за допомогою Promise.race і отримати результат найшвидшого проміса.
// Створіть функцію randomDelay, яка приймає значення і повертає проміс з випадковою затримкою (від 1000 до 5000 мілісекунд).
// Створіть масив з 5 промісів, використовуючи функцію randomDelay, із різними значеннями.
// Використайте Promise.race, щоб виконати всі проміси з масиву і отримати результат найшвидшого проміса.
// Обробіть результат найшвидшого проміса та виведіть його у консоль.

// 1

const array = ["first", "second", "third", "fourth", "fifth"];

const promisesArr = array.map(item => delayedPromise(item));

Promise.all(promisesArr).then(res=>console.log(res))

function delayedPromise(item) {
    const delay = getRandomDelayFunc(1000, 3000);
    
    return new Promise((resolve, reject) => {
        setTimeout(()=> {
            resolve(`${item} - ${delay}ms`)
        }, delay)
    })
}

function getRandomDelayFunc(min, max) {
    return Math.round(Math.random() * (max - min) + min);
}

// 2

Promise.race(promisesArr).then(res=>console.log(res))